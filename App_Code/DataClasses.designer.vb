'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAthlete(instance As Athlete)
    End Sub
  Partial Private Sub UpdateAthlete(instance As Athlete)
    End Sub
  Partial Private Sub DeleteAthlete(instance As Athlete)
    End Sub
  Partial Private Sub InsertClass(instance As [Class])
    End Sub
  Partial Private Sub UpdateClass(instance As [Class])
    End Sub
  Partial Private Sub DeleteClass(instance As [Class])
    End Sub
  Partial Private Sub InsertInstructor(instance As Instructor)
    End Sub
  Partial Private Sub UpdateInstructor(instance As Instructor)
    End Sub
  Partial Private Sub DeleteInstructor(instance As Instructor)
    End Sub
  Partial Private Sub InsertRegistration(instance As Registration)
    End Sub
  Partial Private Sub UpdateRegistration(instance As Registration)
    End Sub
  Partial Private Sub DeleteRegistration(instance As Registration)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DatabaseConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Athletes() As System.Data.Linq.Table(Of Athlete)
		Get
			Return Me.GetTable(Of Athlete)
		End Get
	End Property
	
	Public ReadOnly Property Classes() As System.Data.Linq.Table(Of [Class])
		Get
			Return Me.GetTable(Of [Class])
		End Get
	End Property
	
	Public ReadOnly Property Instructors() As System.Data.Linq.Table(Of Instructor)
		Get
			Return Me.GetTable(Of Instructor)
		End Get
	End Property
	
	Public ReadOnly Property Registrations() As System.Data.Linq.Table(Of Registration)
		Get
			Return Me.GetTable(Of Registration)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Athlete")>  _
Partial Public Class Athlete
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AthleteID As Integer
	
	Private _Athlete_Name As String
	
	Private _Athlete_Email As String
	
	Private _Athlete_Phone As String
	
	Private _Registrations As EntitySet(Of Registration)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAthleteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAthleteIDChanged()
    End Sub
    Partial Private Sub OnAthlete_NameChanging(value As String)
    End Sub
    Partial Private Sub OnAthlete_NameChanged()
    End Sub
    Partial Private Sub OnAthlete_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnAthlete_EmailChanged()
    End Sub
    Partial Private Sub OnAthlete_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnAthlete_PhoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Registrations = New EntitySet(Of Registration)(AddressOf Me.attach_Registrations, AddressOf Me.detach_Registrations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AthleteID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AthleteID() As Integer
		Get
			Return Me._AthleteID
		End Get
		Set
			If ((Me._AthleteID = value)  _
						= false) Then
				Me.OnAthleteIDChanging(value)
				Me.SendPropertyChanging
				Me._AthleteID = value
				Me.SendPropertyChanged("AthleteID")
				Me.OnAthleteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Athlete_Name", DbType:="NVarChar(50)")>  _
	Public Property Athlete_Name() As String
		Get
			Return Me._Athlete_Name
		End Get
		Set
			If (String.Equals(Me._Athlete_Name, value) = false) Then
				Me.OnAthlete_NameChanging(value)
				Me.SendPropertyChanging
				Me._Athlete_Name = value
				Me.SendPropertyChanged("Athlete_Name")
				Me.OnAthlete_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Athlete_Email", DbType:="NVarChar(50)")>  _
	Public Property Athlete_Email() As String
		Get
			Return Me._Athlete_Email
		End Get
		Set
			If (String.Equals(Me._Athlete_Email, value) = false) Then
				Me.OnAthlete_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Athlete_Email = value
				Me.SendPropertyChanged("Athlete_Email")
				Me.OnAthlete_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Athlete_Phone", DbType:="NVarChar(50)")>  _
	Public Property Athlete_Phone() As String
		Get
			Return Me._Athlete_Phone
		End Get
		Set
			If (String.Equals(Me._Athlete_Phone, value) = false) Then
				Me.OnAthlete_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Athlete_Phone = value
				Me.SendPropertyChanged("Athlete_Phone")
				Me.OnAthlete_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Athlete_Registration", Storage:="_Registrations", ThisKey:="AthleteID", OtherKey:="AthleteID")>  _
	Public Property Registrations() As EntitySet(Of Registration)
		Get
			Return Me._Registrations
		End Get
		Set
			Me._Registrations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Registrations(ByVal entity As Registration)
		Me.SendPropertyChanging
		entity.Athlete = Me
	End Sub
	
	Private Sub detach_Registrations(ByVal entity As Registration)
		Me.SendPropertyChanging
		entity.Athlete = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Class")>  _
Partial Public Class [Class]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ClassID As Integer
	
	Private _Class As String
	
	Private _Class_Date As String
	
	Private _Class_Days As String
	
	Private _Class_Time As String
	
	Private _Class_Description As String
	
	Private _IntructorID As System.Nullable(Of Integer)
	
	Private _Registrations As EntitySet(Of Registration)
	
	Private _Instructor As EntityRef(Of Instructor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClassIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnClassIDChanged()
    End Sub
    Partial Private Sub OnClassChanging(value As String)
    End Sub
    Partial Private Sub OnClassChanged()
    End Sub
    Partial Private Sub OnClass_DateChanging(value As String)
    End Sub
    Partial Private Sub OnClass_DateChanged()
    End Sub
    Partial Private Sub OnClass_DaysChanging(value As String)
    End Sub
    Partial Private Sub OnClass_DaysChanged()
    End Sub
    Partial Private Sub OnClass_TimeChanging(value As String)
    End Sub
    Partial Private Sub OnClass_TimeChanged()
    End Sub
    Partial Private Sub OnClass_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnClass_DescriptionChanged()
    End Sub
    Partial Private Sub OnIntructorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIntructorIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Registrations = New EntitySet(Of Registration)(AddressOf Me.attach_Registrations, AddressOf Me.detach_Registrations)
		Me._Instructor = CType(Nothing, EntityRef(Of Instructor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ClassID() As Integer
		Get
			Return Me._ClassID
		End Get
		Set
			If ((Me._ClassID = value)  _
						= false) Then
				Me.OnClassIDChanging(value)
				Me.SendPropertyChanging
				Me._ClassID = value
				Me.SendPropertyChanged("ClassID")
				Me.OnClassIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Class", Storage:="_Class", DbType:="NVarChar(50)")>  _
	Public Property [Class]() As String
		Get
			Return Me._Class
		End Get
		Set
			If (String.Equals(Me._Class, value) = false) Then
				Me.OnClassChanging(value)
				Me.SendPropertyChanging
				Me._Class = value
				Me.SendPropertyChanged("[Class]")
				Me.OnClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Date", DbType:="NVarChar(50)")>  _
	Public Property Class_Date() As String
		Get
			Return Me._Class_Date
		End Get
		Set
			If (String.Equals(Me._Class_Date, value) = false) Then
				Me.OnClass_DateChanging(value)
				Me.SendPropertyChanging
				Me._Class_Date = value
				Me.SendPropertyChanged("Class_Date")
				Me.OnClass_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Days", DbType:="NVarChar(50)")>  _
	Public Property Class_Days() As String
		Get
			Return Me._Class_Days
		End Get
		Set
			If (String.Equals(Me._Class_Days, value) = false) Then
				Me.OnClass_DaysChanging(value)
				Me.SendPropertyChanging
				Me._Class_Days = value
				Me.SendPropertyChanged("Class_Days")
				Me.OnClass_DaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Time", DbType:="NVarChar(50)")>  _
	Public Property Class_Time() As String
		Get
			Return Me._Class_Time
		End Get
		Set
			If (String.Equals(Me._Class_Time, value) = false) Then
				Me.OnClass_TimeChanging(value)
				Me.SendPropertyChanging
				Me._Class_Time = value
				Me.SendPropertyChanged("Class_Time")
				Me.OnClass_TimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Class_Description() As String
		Get
			Return Me._Class_Description
		End Get
		Set
			If (String.Equals(Me._Class_Description, value) = false) Then
				Me.OnClass_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Class_Description = value
				Me.SendPropertyChanged("Class_Description")
				Me.OnClass_DescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntructorID", DbType:="Int")>  _
	Public Property IntructorID() As System.Nullable(Of Integer)
		Get
			Return Me._IntructorID
		End Get
		Set
			If (Me._IntructorID.Equals(value) = false) Then
				If Me._Instructor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIntructorIDChanging(value)
				Me.SendPropertyChanging
				Me._IntructorID = value
				Me.SendPropertyChanged("IntructorID")
				Me.OnIntructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Class_Registration", Storage:="_Registrations", ThisKey:="ClassID", OtherKey:="ClassID")>  _
	Public Property Registrations() As EntitySet(Of Registration)
		Get
			Return Me._Registrations
		End Get
		Set
			Me._Registrations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instructor_Class", Storage:="_Instructor", ThisKey:="IntructorID", OtherKey:="IntructorID", IsForeignKey:=true)>  _
	Public Property Instructor() As Instructor
		Get
			Return Me._Instructor.Entity
		End Get
		Set
			Dim previousValue As Instructor = Me._Instructor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instructor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instructor.Entity = Nothing
					previousValue.Classes.Remove(Me)
				End If
				Me._Instructor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Classes.Add(Me)
					Me._IntructorID = value.IntructorID
				Else
					Me._IntructorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instructor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Registrations(ByVal entity As Registration)
		Me.SendPropertyChanging
		entity.[Class] = Me
	End Sub
	
	Private Sub detach_Registrations(ByVal entity As Registration)
		Me.SendPropertyChanging
		entity.[Class] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instructor")>  _
Partial Public Class Instructor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IntructorID As Integer
	
	Private _Instructor_Name As String
	
	Private _Instructor_Email As String
	
	Private _Instructor_Phone As String
	
	Private _Classes As EntitySet(Of [Class])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIntructorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIntructorIDChanged()
    End Sub
    Partial Private Sub OnInstructor_NameChanging(value As String)
    End Sub
    Partial Private Sub OnInstructor_NameChanged()
    End Sub
    Partial Private Sub OnInstructor_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnInstructor_EmailChanged()
    End Sub
    Partial Private Sub OnInstructor_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnInstructor_PhoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Classes = New EntitySet(Of [Class])(AddressOf Me.attach_Classes, AddressOf Me.detach_Classes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntructorID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IntructorID() As Integer
		Get
			Return Me._IntructorID
		End Get
		Set
			If ((Me._IntructorID = value)  _
						= false) Then
				Me.OnIntructorIDChanging(value)
				Me.SendPropertyChanging
				Me._IntructorID = value
				Me.SendPropertyChanged("IntructorID")
				Me.OnIntructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructor_Name", DbType:="NVarChar(50)")>  _
	Public Property Instructor_Name() As String
		Get
			Return Me._Instructor_Name
		End Get
		Set
			If (String.Equals(Me._Instructor_Name, value) = false) Then
				Me.OnInstructor_NameChanging(value)
				Me.SendPropertyChanging
				Me._Instructor_Name = value
				Me.SendPropertyChanged("Instructor_Name")
				Me.OnInstructor_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructor_Email", DbType:="NVarChar(50)")>  _
	Public Property Instructor_Email() As String
		Get
			Return Me._Instructor_Email
		End Get
		Set
			If (String.Equals(Me._Instructor_Email, value) = false) Then
				Me.OnInstructor_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Instructor_Email = value
				Me.SendPropertyChanged("Instructor_Email")
				Me.OnInstructor_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructor_Phone", DbType:="NVarChar(50)")>  _
	Public Property Instructor_Phone() As String
		Get
			Return Me._Instructor_Phone
		End Get
		Set
			If (String.Equals(Me._Instructor_Phone, value) = false) Then
				Me.OnInstructor_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Instructor_Phone = value
				Me.SendPropertyChanged("Instructor_Phone")
				Me.OnInstructor_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instructor_Class", Storage:="_Classes", ThisKey:="IntructorID", OtherKey:="IntructorID")>  _
	Public Property Classes() As EntitySet(Of [Class])
		Get
			Return Me._Classes
		End Get
		Set
			Me._Classes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Classes(ByVal entity As [Class])
		Me.SendPropertyChanging
		entity.Instructor = Me
	End Sub
	
	Private Sub detach_Classes(ByVal entity As [Class])
		Me.SendPropertyChanging
		entity.Instructor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Registration")>  _
Partial Public Class Registration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RegistrationID As Integer
	
	Private _ClassID As System.Nullable(Of Integer)
	
	Private _AthleteID As System.Nullable(Of Integer)
	
	Private _Athlete As EntityRef(Of Athlete)
	
	Private _Class As EntityRef(Of [Class])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRegistrationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRegistrationIDChanged()
    End Sub
    Partial Private Sub OnClassIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnClassIDChanged()
    End Sub
    Partial Private Sub OnAthleteIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAthleteIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Athlete = CType(Nothing, EntityRef(Of Athlete))
		Me._Class = CType(Nothing, EntityRef(Of [Class]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistrationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RegistrationID() As Integer
		Get
			Return Me._RegistrationID
		End Get
		Set
			If ((Me._RegistrationID = value)  _
						= false) Then
				Me.OnRegistrationIDChanging(value)
				Me.SendPropertyChanging
				Me._RegistrationID = value
				Me.SendPropertyChanged("RegistrationID")
				Me.OnRegistrationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassID", DbType:="Int")>  _
	Public Property ClassID() As System.Nullable(Of Integer)
		Get
			Return Me._ClassID
		End Get
		Set
			If (Me._ClassID.Equals(value) = false) Then
				If Me._Class.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClassIDChanging(value)
				Me.SendPropertyChanging
				Me._ClassID = value
				Me.SendPropertyChanged("ClassID")
				Me.OnClassIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AthleteID", DbType:="Int")>  _
	Public Property AthleteID() As System.Nullable(Of Integer)
		Get
			Return Me._AthleteID
		End Get
		Set
			If (Me._AthleteID.Equals(value) = false) Then
				If Me._Athlete.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAthleteIDChanging(value)
				Me.SendPropertyChanging
				Me._AthleteID = value
				Me.SendPropertyChanged("AthleteID")
				Me.OnAthleteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Athlete_Registration", Storage:="_Athlete", ThisKey:="AthleteID", OtherKey:="AthleteID", IsForeignKey:=true)>  _
	Public Property Athlete() As Athlete
		Get
			Return Me._Athlete.Entity
		End Get
		Set
			Dim previousValue As Athlete = Me._Athlete.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Athlete.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Athlete.Entity = Nothing
					previousValue.Registrations.Remove(Me)
				End If
				Me._Athlete.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Registrations.Add(Me)
					Me._AthleteID = value.AthleteID
				Else
					Me._AthleteID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Athlete")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Class_Registration", Storage:="_Class", ThisKey:="ClassID", OtherKey:="ClassID", IsForeignKey:=true)>  _
	Public Property [Class]() As [Class]
		Get
			Return Me._Class.Entity
		End Get
		Set
			Dim previousValue As [Class] = Me._Class.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Class.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Class.Entity = Nothing
					previousValue.Registrations.Remove(Me)
				End If
				Me._Class.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Registrations.Add(Me)
					Me._ClassID = value.ClassID
				Else
					Me._ClassID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("[Class]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
